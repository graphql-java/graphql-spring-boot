name: "Pull request"
on:
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  validation:
    name: Gradle Wrapper Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1

  verify-google-java-format:
    name: Google Java Format Verification
    runs-on: ubuntu-latest
    needs: validation
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 11
      - name: Cache Gradle
        uses: actions/cache@v2
        env:
          java-version: 11
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ env.java-version }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-${{ env.java-version }}-gradle-
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Gradle Check
        run: ./gradlew --info build -x test

  commitlint:
    name: Validate conventional commits
    runs-on: ubuntu-latest
    needs: validation
    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        name: Setup Node
        with:
          node-version: 14
      - run: cd commitlint && npm ci && git ls-remote https://github.com/graphql-java-kickstart/graphql-spring-boot.git HEAD | grep -o '[0-9a-f]*' | xargs -I{} npx commitlint --from {} --verbose
        name: Run commitlint

  test:
    name: Test run
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        java: [ 8, 11, 16 ]
    needs: [ validation, commitlint, verify-google-java-format ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}
      - name: Cache Gradle
        uses: actions/cache@v2
        env:
          java-version: ${{ matrix.java }}
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ env.java-version }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-${{ env.java-version }}-gradle-
      - name: Make gradlew executable (non-Windows only)
        if: matrix.os != 'windows-latest'
        run: chmod +x ./gradlew
      - name: Gradle Check (non-Windows)
        if: matrix.os != 'windows-latest'
        run: ./gradlew --info check -x verifyGoogleJavaFormat
      - name: Gradle Check (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: gradlew --info check -x verifyGoogleJavaFormat

  build:
    name: Sonar analysis
    needs: test
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        if: env.SONAR_TOKEN != null
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        if: env.SONAR_TOKEN != null
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 11
      - name: Cache SonarCloud packages
        if: env.SONAR_TOKEN != null
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        if: env.SONAR_TOKEN != null
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        if: env.SONAR_TOKEN != null
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build jacocoTestReport sonarqube --info -x verifyGoogleJavaFormat
